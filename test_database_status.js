// Script de test pour v√©rifier l'√©tat de la base de donn√©es
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDatabaseStatus() {
  console.log('üîç Test de l\'√©tat de la base de donn√©es...\n');

  try {
    // Test 1: V√©rifier si la table professional_profiles existe
    console.log('1. V√©rification de la table professional_profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('professional_profiles')
      .select('count')
      .limit(1);

    if (profilesError) {
      console.log('‚ùå Table professional_profiles n\'existe pas ou erreur:', profilesError.message);
    } else {
      console.log('‚úÖ Table professional_profiles existe');
    }

    // Test 2: V√©rifier si la table professionals existe
    console.log('\n2. V√©rification de la table professionals...');
    const { data: professionals, error: professionalsError } = await supabase
      .from('professionals')
      .select('count')
      .limit(1);

    if (professionalsError) {
      console.log('‚ùå Table professionals n\'existe pas ou erreur:', professionalsError.message);
    } else {
      console.log('‚úÖ Table professionals existe');
    }

    // Test 3: V√©rifier les profils utilisateurs
    console.log('\n3. V√©rification des profils utilisateurs...');
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, full_name, created_at')
      .limit(5);

    if (usersError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des profils:', usersError.message);
    } else {
      console.log(`‚úÖ ${users.length} profils utilisateurs trouv√©s`);
      users.forEach(user => {
        console.log(`   - ${user.full_name} (${user.id})`);
      });
    }

    // Test 4: V√©rifier les r√¥les utilisateurs
    console.log('\n4. V√©rification des r√¥les utilisateurs...');
    const { data: roles, error: rolesError } = await supabase
      .from('user_roles')
      .select('user_id, role')
      .limit(5);

    if (rolesError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des r√¥les:', rolesError.message);
    } else {
      console.log(`‚úÖ ${roles.length} r√¥les utilisateurs trouv√©s`);
      roles.forEach(role => {
        console.log(`   - ${role.user_id}: ${role.role}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testDatabaseStatus();
